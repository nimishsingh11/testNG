<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="13" passed="12" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-04-30T17:29:08Z" name="Package Execution Suite" finished-at="2022-04-30T17:29:22Z" duration-ms="13171">
    <groups>
      <group name="regression">
        <method signature="First.testCase1()[pri:0, instance:test.First@6aaceffd]" name="testCase1" class="test.First"/>
        <method signature="First.testCase2()[pri:0, instance:test.First@6aaceffd]" name="testCase2" class="test.First"/>
      </group> <!-- regression -->
      <group name="apr_release">
        <method signature="First.testCase2()[pri:0, instance:test.First@6aaceffd]" name="testCase2" class="test.First"/>
        <method signature="First.testCase3()[pri:0, instance:test.First@6aaceffd]" name="testCase3" class="test.First"/>
        <method signature="First.testCase4()[pri:0, instance:test.First@6aaceffd]" name="testCase4" class="test.First"/>
      </group> <!-- apr_release -->
    </groups>
    <test started-at="2022-04-30T17:29:08Z" name="Package Execution" finished-at="2022-04-30T17:29:22Z" duration-ms="13171">
      <class name="intro.DocTypeRules">
        <test-method signature="loginUser(java.lang.String, java.lang.String)[pri:1, instance:intro.DocTypeRules@37883b97]" started-at="2022-04-30T22:59:17Z" name="loginUser" data-provider="loginData" finished-at="2022-04-30T22:59:19Z" duration-ms="1421" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[nimish.singh@digilytics.ai]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Nimish1610]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginUser -->
        <test-method signature="saveDocRule(java.lang.Integer, java.lang.Integer)[pri:2, instance:intro.DocTypeRules@37883b97]" started-at="2022-04-30T22:59:19Z" name="saveDocRule" data-provider="ruleData" finished-at="2022-04-30T22:59:20Z" duration-ms="1280" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveDocRule -->
        <test-method signature="ruleList()[pri:3, instance:intro.DocTypeRules@37883b97]" started-at="2022-04-30T22:59:20Z" name="ruleList" finished-at="2022-04-30T22:59:22Z" duration-ms="1466" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
	expected [true] but found [true],
	expected [true] but found [true],
	expected [true] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
	expected [true] but found [true],
	expected [true] but found [true],
	expected [true] but found [true]
	at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)
	at intro.DocTypeRules.ruleList(DocTypeRules.java:102)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ruleList -->
      </class> <!-- intro.DocTypeRules -->
      <class name="intro.A">
        <test-method is-config="true" signature="loginUser()[pri:0, instance:intro.A@c86b9e3]" started-at="2022-04-30T22:59:08Z" name="loginUser" finished-at="2022-04-30T22:59:15Z" duration-ms="6644" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginUser -->
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:15Z" name="beforeTest" finished-at="2022-04-30T22:59:15Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="abc()[pri:0, instance:intro.A@c86b9e3]" started-at="2022-04-30T22:59:16Z" name="abc" finished-at="2022-04-30T22:59:17Z" duration-ms="915" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- abc -->
      </class> <!-- intro.A -->
      <class name="test.DependentTest">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:15Z" name="beforeMethod" finished-at="2022-04-30T22:59:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testCase2()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:15Z" name="testCase2" finished-at="2022-04-30T22:59:15Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:15Z" name="beforeMethod" finished-at="2022-04-30T22:59:15Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testCase4()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:15Z" name="testCase4" finished-at="2022-04-30T22:59:15Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase4 -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:16Z" name="beforeMethod" finished-at="2022-04-30T22:59:16Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testCase1()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:16Z" name="testCase1" finished-at="2022-04-30T22:59:16Z" depends-on-methods="test.DependentTest.testCase2" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase1 -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:16Z" name="beforeMethod" finished-at="2022-04-30T22:59:16Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testCase3()[pri:0, instance:test.DependentTest@10aa41f2]" started-at="2022-04-30T22:59:16Z" name="testCase3" finished-at="2022-04-30T22:59:16Z" depends-on-methods="test.DependentTest.testCase1" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase3 -->
      </class> <!-- test.DependentTest -->
      <class name="intro.Login">
        <test-method signature="loginUser(java.lang.String, java.lang.String)[pri:0, instance:intro.Login@6ab778a]" started-at="2022-04-30T22:59:15Z" name="loginUser" data-provider="loginData" finished-at="2022-04-30T22:59:16Z" duration-ms="1263" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[nimish.singh@digilytics.ai]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Nimish1610]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginUser -->
      </class> <!-- intro.Login -->
      <class name="test.First">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:08Z" name="beforeSuite" finished-at="2022-04-30T22:59:08Z" duration-ms="27" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="beforeClass" finished-at="2022-04-30T22:59:17Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testCase1()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="testCase1" finished-at="2022-04-30T22:59:17Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase1 -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="beforeMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="afterMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="beforeMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testCase2()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="testCase2" finished-at="2022-04-30T22:59:17Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="afterMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="beforeMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testCase3()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="testCase3" finished-at="2022-04-30T22:59:17Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase3 -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="afterMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="beforeMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testCase4()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="testCase4" finished-at="2022-04-30T22:59:17Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase4 -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="afterMethod" finished-at="2022-04-30T22:59:17Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:17Z" name="afterClass" finished-at="2022-04-30T22:59:17Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:22Z" name="afterTest" finished-at="2022-04-30T22:59:22Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:test.First@6aaceffd]" started-at="2022-04-30T22:59:22Z" name="afterSuite" finished-at="2022-04-30T22:59:22Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- test.First -->
    </test> <!-- Package Execution -->
  </suite> <!-- Package Execution Suite -->
</testng-results>
